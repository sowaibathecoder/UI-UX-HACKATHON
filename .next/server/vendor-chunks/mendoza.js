"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mendoza";
exports.ids = ["vendor-chunks/mendoza"];
exports.modules = {

/***/ "(ssr)/./node_modules/mendoza/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/mendoza/dist/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyPatch: () => (/* binding */ applyPatch),\n/* harmony export */   incremental: () => (/* binding */ incrementalPatcher)\n/* harmony export */ });\nconst OPS = [\n  \"Value\",\n  \"Copy\",\n  \"Blank\",\n  \"ReturnIntoArray\",\n  \"ReturnIntoObject\",\n  \"ReturnIntoObjectSameKey\",\n  \"PushField\",\n  \"PushElement\",\n  \"PushParent\",\n  \"Pop\",\n  \"PushFieldCopy\",\n  \"PushFieldBlank\",\n  \"PushElementCopy\",\n  \"PushElementBlank\",\n  \"ReturnIntoObjectPop\",\n  \"ReturnIntoObjectSameKeyPop\",\n  \"ReturnIntoArrayPop\",\n  \"ObjectSetFieldValue\",\n  \"ObjectCopyField\",\n  \"ObjectDeleteField\",\n  \"ArrayAppendValue\",\n  \"ArrayAppendSlice\",\n  \"StringAppendString\",\n  \"StringAppendSlice\"\n];\nclass Patcher {\n  model;\n  root;\n  patch;\n  i;\n  inputStack;\n  outputStack;\n  constructor(model, root, patch) {\n    this.model = model, this.root = root, this.patch = patch, this.i = 0, this.inputStack = [], this.outputStack = [];\n  }\n  read() {\n    return this.patch[this.i++];\n  }\n  process() {\n    for (this.inputStack.push({ value: this.root }), this.outputStack.push({ value: this.root }); this.i < this.patch.length; ) {\n      let opcode = this.read(), op = OPS[opcode];\n      if (!op)\n        throw new Error(`Unknown opcode: ${opcode}`);\n      let processor = `process${op}`;\n      this[processor].apply(this);\n    }\n    let entry = this.outputStack.pop();\n    return this.finalizeOutput(entry);\n  }\n  inputEntry() {\n    return this.inputStack[this.inputStack.length - 1];\n  }\n  inputKey(entry, idx) {\n    return entry.keys || (entry.keys = this.model.objectGetKeys(entry.value).sort()), entry.keys[idx];\n  }\n  outputEntry() {\n    return this.outputStack[this.outputStack.length - 1];\n  }\n  outputArray() {\n    let entry = this.outputEntry();\n    return entry.writeValue || (entry.writeValue = this.model.copyArray(entry.value)), entry.writeValue;\n  }\n  outputObject() {\n    let entry = this.outputEntry();\n    return entry.writeValue || (entry.writeValue = this.model.copyObject(entry.value)), entry.writeValue;\n  }\n  outputString() {\n    let entry = this.outputEntry();\n    return entry.writeValue || (entry.writeValue = this.model.copyString(entry.value)), entry.writeValue;\n  }\n  finalizeOutput(entry) {\n    return entry.writeValue ? this.model.finalize(entry.writeValue) : entry.value;\n  }\n  // Processors:\n  processValue() {\n    let value = this.model.wrap(this.read());\n    this.outputStack.push({ value });\n  }\n  processCopy() {\n    let input = this.inputEntry();\n    this.outputStack.push({ value: input.value });\n  }\n  processBlank() {\n    this.outputStack.push({ value: null });\n  }\n  processReturnIntoArray() {\n    let entry = this.outputStack.pop(), result = this.finalizeOutput(entry), arr = this.outputArray();\n    this.model.arrayAppendValue(arr, result);\n  }\n  processReturnIntoObject() {\n    let key = this.read(), entry = this.outputStack.pop(), result = this.finalizeOutput(entry);\n    result = this.model.markChanged(result);\n    let obj = this.outputObject();\n    this.model.objectSetField(obj, key, result);\n  }\n  processReturnIntoObjectSameKey() {\n    let input = this.inputEntry(), entry = this.outputStack.pop(), result = this.finalizeOutput(entry), obj = this.outputObject();\n    this.model.objectSetField(obj, input.key, result);\n  }\n  processPushField() {\n    let idx = this.read(), entry = this.inputEntry(), key = this.inputKey(entry, idx), value = this.model.objectGetField(entry.value, key);\n    this.inputStack.push({ value, key });\n  }\n  processPushElement() {\n    let idx = this.read(), entry = this.inputEntry(), value = this.model.arrayGetElement(entry.value, idx);\n    this.inputStack.push({ value });\n  }\n  processPop() {\n    this.inputStack.pop();\n  }\n  processPushFieldCopy() {\n    this.processPushField(), this.processCopy();\n  }\n  processPushFieldBlank() {\n    this.processPushField(), this.processBlank();\n  }\n  processPushElementCopy() {\n    this.processPushElement(), this.processCopy();\n  }\n  processPushElementBlank() {\n    this.processPushElement(), this.processBlank();\n  }\n  processReturnIntoObjectPop() {\n    this.processReturnIntoObject(), this.processPop();\n  }\n  processReturnIntoObjectSameKeyPop() {\n    this.processReturnIntoObjectSameKey(), this.processPop();\n  }\n  processReturnIntoArrayPop() {\n    this.processReturnIntoArray(), this.processPop();\n  }\n  processObjectSetFieldValue() {\n    this.processValue(), this.processReturnIntoObject();\n  }\n  processObjectCopyField() {\n    this.processPushField(), this.processCopy(), this.processReturnIntoObjectSameKey(), this.processPop();\n  }\n  processObjectDeleteField() {\n    let idx = this.read(), entry = this.inputEntry(), key = this.inputKey(entry, idx), obj = this.outputObject();\n    this.model.objectDeleteField(obj, key);\n  }\n  processArrayAppendValue() {\n    let value = this.model.wrap(this.read()), arr = this.outputArray();\n    this.model.arrayAppendValue(arr, value);\n  }\n  processArrayAppendSlice() {\n    let left = this.read(), right = this.read(), str = this.outputArray(), val = this.inputEntry().value;\n    this.model.arrayAppendSlice(str, val, left, right);\n  }\n  processStringAppendString() {\n    let value = this.model.wrap(this.read()), str = this.outputString();\n    this.model.stringAppendValue(str, value);\n  }\n  processStringAppendSlice() {\n    let left = this.read(), right = this.read(), str = this.outputString(), val = this.inputEntry().value;\n    this.model.stringAppendSlice(str, val, left, right);\n  }\n}\nfunction utf8charSize(code) {\n  return code >> 16 ? 4 : code >> 11 ? 3 : code >> 7 ? 2 : 1;\n}\nfunction utf8stringSize(str) {\n  let b = 0;\n  for (let i = 0; i < str.length; i++) {\n    let code = str.codePointAt(i), size = utf8charSize(code);\n    size == 4 && i++, b += size;\n  }\n  return b;\n}\nfunction utf8resolveIndex(str, idx, start = 0) {\n  let byteCount = start, ucsIdx = 0;\n  for (ucsIdx = start; byteCount < idx; ucsIdx++) {\n    let code = str.codePointAt(ucsIdx), size = utf8charSize(code);\n    size === 4 && ucsIdx++, byteCount += size;\n  }\n  return ucsIdx;\n}\nfunction commonPrefix(str, str2) {\n  let len = Math.min(str.length, str2.length), b = 0;\n  for (let i = 0; i < len; ) {\n    let aPoint = str.codePointAt(i), bPoint = str2.codePointAt(i);\n    if (aPoint !== bPoint)\n      return b;\n    let size = utf8charSize(aPoint);\n    b += size, i += size === 4 ? 2 : 1;\n  }\n  return b;\n}\nfunction commonSuffix(str, str2, prefix = 0) {\n  let len = Math.min(str.length, str2.length) - prefix, b = 0;\n  for (let i = 0; i < len; ) {\n    let aPoint = str.codePointAt(str.length - 1 - i), bPoint = str2.codePointAt(str2.length - 1 - i);\n    if (aPoint !== bPoint)\n      return b;\n    let size = utf8charSize(aPoint);\n    b += size, i += size === 4 ? 2 : 1;\n  }\n  return b;\n}\nclass IncrementalModel {\n  meta;\n  constructor(meta) {\n    this.meta = meta;\n  }\n  wrap(data) {\n    return this.wrapWithMeta(data, this.meta, this.meta);\n  }\n  wrapWithMeta(data, startMeta, endMeta = this.meta) {\n    return { data, startMeta, endMeta };\n  }\n  asObject(value) {\n    if (!value.content) {\n      let fields = {};\n      for (let [key, val] of Object.entries(value.data))\n        fields[key] = this.wrapWithMeta(val, value.startMeta);\n      value.content = { type: \"object\", fields };\n    }\n    return value.content;\n  }\n  asArray(value) {\n    if (!value.content) {\n      let elements = value.data.map(\n        (item) => this.wrapWithMeta(item, value.startMeta)\n      ), metas = elements.map(() => this.meta);\n      value.content = { type: \"array\", elements, metas };\n    }\n    return value.content;\n  }\n  asString(value) {\n    if (!value.content) {\n      let str = value.data, part = {\n        value: str,\n        utf8size: utf8stringSize(str),\n        uses: [],\n        startMeta: value.startMeta,\n        endMeta: value.endMeta\n      };\n      value.content = this.stringFromParts([part]);\n    }\n    return value.content;\n  }\n  stringFromParts(parts) {\n    let str = {\n      type: \"string\",\n      parts\n    };\n    for (let part of parts)\n      part.uses.push(str);\n    return str;\n  }\n  objectGetKeys(value) {\n    return value.content ? Object.keys(value.content.fields) : Object.keys(value.data);\n  }\n  objectGetField(value, key) {\n    return this.asObject(value).fields[key];\n  }\n  arrayGetElement(value, idx) {\n    return this.asArray(value).elements[idx];\n  }\n  finalize(content) {\n    return this.updateEndMeta(content), { content, startMeta: this.meta, endMeta: this.meta };\n  }\n  markChanged(value) {\n    return this.wrap(unwrap(value));\n  }\n  updateEndMeta(content) {\n    if (content.type == \"string\")\n      for (let part of content.parts)\n        part.endMeta = this.meta;\n    else if (content.type === \"array\")\n      for (let val of content.elements)\n        val.content && val.endMeta !== this.meta && this.updateEndMeta(val.content), val.endMeta = this.meta;\n    else\n      for (let val of Object.values(content.fields))\n        val.content && val.endMeta !== this.meta && this.updateEndMeta(val.content), val.endMeta = this.meta;\n  }\n  copyString(value) {\n    if (value) {\n      let other = this.asString(value);\n      return this.stringFromParts(other.parts.slice());\n    } else\n      return {\n        type: \"string\",\n        parts: []\n      };\n  }\n  copyObject(value) {\n    let obj = {\n      type: \"object\",\n      fields: {}\n    };\n    if (value) {\n      let other = this.asObject(value);\n      Object.assign(obj.fields, other.fields);\n    }\n    return obj;\n  }\n  copyArray(value) {\n    let arr = value ? this.asArray(value) : null, elements = arr ? arr.elements : [], metas = arr ? arr.metas : [];\n    return {\n      type: \"array\",\n      elements,\n      metas\n    };\n  }\n  objectSetField(target, key, value) {\n    target.fields[key] = value;\n  }\n  objectDeleteField(target, key) {\n    delete target.fields[key];\n  }\n  arrayAppendValue(target, value) {\n    target.elements.push(value), target.metas.push(this.meta);\n  }\n  arrayAppendSlice(target, source, left, right) {\n    let arr = this.asArray(source), samePosition = arr.elements.length === left;\n    if (target.elements.push(...arr.elements.slice(left, right)), samePosition)\n      target.metas.push(...arr.metas.slice(left, right));\n    else\n      for (let i = left; i < right; i++)\n        target.metas.push(this.meta);\n  }\n  stringAppendValue(target, value) {\n    let str = this.asString(value);\n    for (let part of str.parts)\n      this.stringAppendPart(target, part);\n  }\n  stringAppendPart(target, part) {\n    target.parts.push(part), part.uses.push(target);\n  }\n  resolveStringPart(str, from, len) {\n    if (len === 0)\n      return from;\n    for (let i = from; i < str.parts.length; i++) {\n      let part = str.parts[i];\n      if (len === part.utf8size)\n        return i + 1;\n      if (len < part.utf8size)\n        return this.splitString(part, len), i + 1;\n      len -= part.utf8size;\n    }\n    throw new Error(\"splitting string out of bounds\");\n  }\n  splitString(part, idx) {\n    let leftValue, rightValue, leftSize = idx, rightSize = part.utf8size - leftSize;\n    if (part.utf8size !== part.value.length) {\n      let byteCount = 0;\n      for (idx = 0; byteCount < leftSize; idx++) {\n        let code = part.value.codePointAt(idx), size = utf8charSize(code);\n        size === 4 && idx++, byteCount += size;\n      }\n    }\n    leftValue = part.value.slice(0, idx), rightValue = part.value.slice(idx);\n    let newPart = {\n      value: rightValue,\n      utf8size: rightSize,\n      uses: part.uses.slice(),\n      startMeta: part.startMeta,\n      endMeta: part.endMeta\n    };\n    part.value = leftValue, part.utf8size = leftSize;\n    for (let use of part.uses) {\n      let ndx = use.parts.indexOf(part);\n      if (ndx === -1)\n        throw new Error(\"bug: mismatch between string parts and use.\");\n      use.parts.splice(ndx + 1, 0, newPart);\n    }\n  }\n  stringAppendSlice(target, source, left, right) {\n    let str = this.asString(source), firstPart = this.resolveStringPart(str, 0, left), lastPart = this.resolveStringPart(str, firstPart, right - left);\n    for (let i = firstPart; i < lastPart; i++) {\n      let part = str.parts[i];\n      this.stringAppendPart(target, part);\n    }\n  }\n}\nfunction wrap(data, meta) {\n  return { data, startMeta: meta, endMeta: meta };\n}\nfunction unwrap(value) {\n  if (typeof value.data < \"u\")\n    return value.data;\n  let result, content = value.content;\n  switch (content.type) {\n    case \"string\":\n      result = content.parts.map((part) => part.value).join(\"\");\n      break;\n    case \"array\":\n      result = content.elements.map((val) => unwrap(val));\n      break;\n    case \"object\": {\n      result = {};\n      for (let [key, val] of Object.entries(content.fields))\n        result[key] = unwrap(val);\n    }\n  }\n  return value.data = result, result;\n}\nfunction getType(value) {\n  return value.content ? value.content.type : Array.isArray(value.data) ? \"array\" : value.data === null ? \"null\" : typeof value.data;\n}\nfunction rebaseValue(left, right) {\n  let leftType = getType(left), rightType = getType(right);\n  if (leftType !== rightType)\n    return right;\n  let leftModel = new IncrementalModel(left.endMeta), rightModel = new IncrementalModel(right.endMeta);\n  switch (leftType) {\n    case \"object\": {\n      let leftObj = leftModel.asObject(left), rightObj = rightModel.asObject(right), identicalFieldCount = 0, leftFieldCount = Object.keys(leftObj.fields).length, rightFieldCount = Object.keys(rightObj.fields).length;\n      for (let [key, rightVal] of Object.entries(rightObj.fields)) {\n        let leftVal = leftObj.fields[key];\n        leftVal && (rightObj.fields[key] = rebaseValue(leftVal, rightVal), rightObj.fields[key] === leftVal && identicalFieldCount++);\n      }\n      return leftFieldCount === rightFieldCount && leftFieldCount === identicalFieldCount ? left : right;\n    }\n    case \"array\": {\n      let leftArr = leftModel.asArray(left), rightArr = rightModel.asArray(right);\n      if (leftArr.elements.length !== rightArr.elements.length)\n        break;\n      let numRebased = 0;\n      for (let i = 0; i < rightArr.elements.length; i++)\n        rightArr.elements[i] = rebaseValue(leftArr.elements[i], rightArr.elements[i]), rightArr.elements[i] !== leftArr.elements[i] && numRebased++;\n      return numRebased === 0 ? left : right;\n    }\n    case \"null\":\n    case \"boolean\":\n    case \"number\": {\n      if (unwrap(left) === unwrap(right))\n        return left;\n      break;\n    }\n    case \"string\": {\n      let leftRaw = unwrap(left), rightRaw = unwrap(right);\n      if (leftRaw === rightRaw)\n        return left;\n      let result = rightModel.copyString(null), prefix = commonPrefix(leftRaw, rightRaw), suffix = commonSuffix(leftRaw, rightRaw, prefix), rightLen = utf8stringSize(rightRaw), leftLen = utf8stringSize(leftRaw);\n      0 < prefix && rightModel.stringAppendSlice(result, left, 0, prefix), prefix < rightLen - suffix && rightModel.stringAppendSlice(result, right, prefix, rightLen - suffix), leftLen - suffix < leftLen && rightModel.stringAppendSlice(result, left, leftLen - suffix, leftLen);\n      let value = rightModel.finalize(result);\n      if (unwrap(value) !== rightRaw)\n        throw new Error(\"incorrect string rebase\");\n      return value;\n    }\n  }\n  return right;\n}\nfunction applyPatch$1(left, patch, startMeta) {\n  let model = new IncrementalModel(startMeta);\n  return new Patcher(model, left, patch).process();\n}\nvar incrementalPatcher = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  applyPatch: applyPatch$1,\n  getType,\n  rebaseValue,\n  unwrap,\n  wrap\n});\nclass SimpleModel {\n  wrap(data) {\n    return data;\n  }\n  finalize(b) {\n    return Array.isArray(b) ? b : b.data;\n  }\n  markChanged(value) {\n    return value;\n  }\n  objectGetKeys(value) {\n    return Object.keys(value);\n  }\n  objectGetField(value, key) {\n    return value[key];\n  }\n  arrayGetElement(value, idx) {\n    return value[idx];\n  }\n  copyObject(value) {\n    let res = {\n      type: \"object\",\n      data: {}\n    };\n    if (value !== null)\n      for (let [key, val] of Object.entries(value))\n        res.data[key] = val;\n    return res;\n  }\n  copyArray(value) {\n    return value === null ? [] : value.slice();\n  }\n  copyString(value) {\n    return {\n      type: \"string\",\n      data: value === null ? \"\" : value\n    };\n  }\n  objectSetField(target, key, value) {\n    target.data[key] = value;\n  }\n  objectDeleteField(target, key) {\n    delete target.data[key];\n  }\n  arrayAppendValue(target, value) {\n    target.push(value);\n  }\n  arrayAppendSlice(target, source, left, right) {\n    target.push(...source.slice(left, right));\n  }\n  stringAppendSlice(target, source, left, right) {\n    const sourceString = source, leftPos = utf8resolveIndex(sourceString, left), rightPos = utf8resolveIndex(sourceString, right, leftPos);\n    target.data += sourceString.slice(leftPos, rightPos);\n  }\n  stringAppendValue(target, value) {\n    target.data += value;\n  }\n}\nfunction applyPatch(left, patch) {\n  let root = left;\n  return new Patcher(new SimpleModel(), root, patch).process();\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mendoza/dist/index.js\n");

/***/ })

};
;