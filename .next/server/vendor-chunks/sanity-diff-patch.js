"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sanity-diff-patch";
exports.ids = ["vendor-chunks/sanity-diff-patch"];
exports.modules = {

/***/ "(ssr)/./node_modules/sanity-diff-patch/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/sanity-diff-patch/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiffError: () => (/* binding */ DiffError),\n/* harmony export */   diffItem: () => (/* binding */ diffItem),\n/* harmony export */   diffPatch: () => (/* binding */ diffPatch)\n/* harmony export */ });\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/./node_modules/@sanity/diff-match-patch/dist/index.js\");\n\nconst IS_DOTTABLE_RE = /^[A-Za-z_][A-Za-z0-9_]*$/;\nfunction pathToString(path) {\n  return path.reduce((target, segment, i) => {\n    if (Array.isArray(segment))\n      return `${target}[${segment.join(\":\")}]`;\n    if (isKeyedObject(segment))\n      return `${target}[_key==\"${segment._key}\"]`;\n    if (typeof segment == \"number\")\n      return `${target}[${segment}]`;\n    if (typeof segment == \"string\" && !IS_DOTTABLE_RE.test(segment))\n      return `${target}['${segment}']`;\n    if (typeof segment == \"string\")\n      return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n    throw new Error(`Unsupported path segment \"${segment}\"`);\n  }, \"\");\n}\nfunction isKeyedObject(obj) {\n  return typeof obj == \"object\" && typeof obj._key == \"string\";\n}\nclass DiffError extends Error {\n  path;\n  value;\n  serializedPath;\n  constructor(message, path, value) {\n    const serializedPath = pathToString(path);\n    super(`${message} (at '${serializedPath}')`), this.path = path, this.serializedPath = serializedPath, this.value = value;\n  }\n}\nconst idPattern = /^[a-z0-9][a-z0-9_.-]+$/i, propPattern = /^[a-zA-Z_][a-zA-Z0-9_-]*$/, propStartPattern = /^[a-z_]/i;\nfunction validateProperty(property, value, path) {\n  if (!propStartPattern.test(property))\n    throw new DiffError(\"Keys must start with a letter (a-z)\", path.concat(property), value);\n  if (!propPattern.test(property))\n    throw new DiffError(\n      \"Keys can only contain letters, numbers and underscores\",\n      path.concat(property),\n      value\n    );\n  if (property === \"_key\" || property === \"_ref\" || property === \"_type\") {\n    if (typeof value != \"string\")\n      throw new DiffError(\"Keys must be strings\", path.concat(property), value);\n    if (!idPattern.test(value))\n      throw new DiffError(\"Invalid key - use less exotic characters\", path.concat(property), value);\n  }\n  return property;\n}\nconst ignoredKeys = [\"_id\", \"_type\", \"_createdAt\", \"_updatedAt\", \"_rev\"], defaultOptions = {\n  hideWarnings: !1,\n  diffMatchPatch: {\n    enabled: !0,\n    // Only use diff-match-patch if target string is longer than this threshold\n    lengthThresholdAbsolute: 30,\n    // Only use generated diff-match-patch if the patch length is less than or equal to\n    // (targetString * relative). Example: A 100 character target with a relative factor\n    // of 1.2 will allow a 120 character diff-match-patch. If larger than this number,\n    // it will fall back to a regular `set` patch.\n    lengthThresholdRelative: 1.2\n  }\n};\nfunction mergeOptions(options) {\n  return {\n    ...defaultOptions,\n    ...options,\n    diffMatchPatch: { ...defaultOptions.diffMatchPatch, ...options.diffMatchPatch || {} }\n  };\n}\nfunction diffPatch(itemA, itemB, opts) {\n  const options = mergeOptions(opts || {}), id = options.id || itemA._id === itemB._id && itemA._id, revisionLocked = options.ifRevisionID, ifRevisionID = typeof revisionLocked == \"boolean\" ? itemA._rev : revisionLocked, basePath = options.basePath || [];\n  if (!id)\n    throw new Error(\n      \"_id on itemA and itemB not present or differs, specify document id the mutations should be applied to\"\n    );\n  if (revisionLocked === !0 && !ifRevisionID)\n    throw new Error(\n      \"`ifRevisionID` is set to `true`, but no `_rev` was passed in item A. Either explicitly set `ifRevisionID` to a revision, or pass `_rev` as part of item A.\"\n    );\n  if (basePath.length === 0 && itemA._type !== itemB._type)\n    throw new Error(`_type is immutable and cannot be changed (${itemA._type} => ${itemB._type})`);\n  const operations = diffItem(itemA, itemB, options, basePath, []);\n  return serializePatches(operations, { id, ifRevisionID: revisionLocked ? ifRevisionID : void 0 });\n}\nfunction diffItem(itemA, itemB, opts = defaultOptions, path = [], patches = []) {\n  if (itemA === itemB)\n    return patches;\n  const aType = Array.isArray(itemA) ? \"array\" : typeof itemA, bType = Array.isArray(itemB) ? \"array\" : typeof itemB, aIsUndefined = aType === \"undefined\", bIsUndefined = bType === \"undefined\";\n  if (aIsUndefined && !bIsUndefined)\n    return patches.push({ op: \"set\", path, value: itemB }), patches;\n  if (!aIsUndefined && bIsUndefined)\n    return patches.push({ op: \"unset\", path }), patches;\n  const options = mergeOptions(opts), dataType = aIsUndefined ? bType : aType;\n  return dataType === \"object\" || dataType === \"array\" ? aType !== bType ? (patches.push({ op: \"set\", path, value: itemB }), patches) : dataType === \"array\" ? diffArray(itemA, itemB, options, path, patches) : diffObject(itemA, itemB, options, path, patches) : diffPrimitive(itemA, itemB, options, path, patches);\n}\nfunction diffObject(itemA, itemB, options, path, patches) {\n  const atRoot = path.length === 0, aKeys = Object.keys(itemA).filter(atRoot ? isNotIgnoredKey : yes).map((key) => validateProperty(key, itemA[key], path)), aKeysLength = aKeys.length, bKeys = Object.keys(itemB).filter(atRoot ? isNotIgnoredKey : yes).map((key) => validateProperty(key, itemB[key], path)), bKeysLength = bKeys.length;\n  for (let i = 0; i < aKeysLength; i++) {\n    const key = aKeys[i];\n    key in itemB || patches.push({ op: \"unset\", path: path.concat(key) });\n  }\n  for (let i = 0; i < bKeysLength; i++) {\n    const key = bKeys[i];\n    diffItem(itemA[key], itemB[key], options, path.concat([key]), patches);\n  }\n  return patches;\n}\nfunction diffArray(itemA, itemB, options, path, patches) {\n  if (itemB.length > itemA.length && patches.push({\n    op: \"insert\",\n    after: path.concat([-1]),\n    items: itemB.slice(itemA.length).map((item, i) => nullifyUndefined(item, path, i, options))\n  }), itemB.length < itemA.length) {\n    const isSingle = itemA.length - itemB.length === 1, unsetItems = itemA.slice(itemB.length);\n    isRevisionLocked(options) || !isUniquelyKeyed(unsetItems) ? patches.push({\n      op: \"unset\",\n      path: path.concat([isSingle ? itemB.length : [itemB.length, \"\"]])\n    }) : patches.push(\n      ...unsetItems.map(\n        (item) => ({ op: \"unset\", path: path.concat({ _key: item._key }) })\n      )\n    );\n  }\n  for (let i = 0; i < itemB.length; i++)\n    if (Array.isArray(itemB[i]))\n      throw new DiffError(\"Multi-dimensional arrays not supported\", path.concat(i), itemB[i]);\n  const overlapping = Math.min(itemA.length, itemB.length), segmentA = itemA.slice(0, overlapping), segmentB = itemB.slice(0, overlapping);\n  return isUniquelyKeyed(segmentA) && isUniquelyKeyed(segmentB) ? diffArrayByKey(segmentA, segmentB, options, path, patches) : diffArrayByIndex(segmentA, segmentB, options, path, patches);\n}\nfunction diffArrayByIndex(itemA, itemB, options, path, patches) {\n  for (let i = 0; i < itemA.length; i++)\n    diffItem(\n      itemA[i],\n      nullifyUndefined(itemB[i], path, i, options),\n      options,\n      path.concat(i),\n      patches\n    );\n  return patches;\n}\nfunction diffArrayByKey(itemA, itemB, options, path, patches) {\n  const keyedA = indexByKey(itemA), keyedB = indexByKey(itemB);\n  if (!arrayIsEqual(keyedA.keys, keyedB.keys))\n    return diffArrayByIndex(itemA, itemB, options, path, patches);\n  for (let i = 0; i < keyedB.keys.length; i++) {\n    const key = keyedB.keys[i], valueA = keyedA.index[key], valueB = nullifyUndefined(keyedB.index[key], path, i, options);\n    diffItem(valueA, valueB, options, path.concat({ _key: key }), patches);\n  }\n  return patches;\n}\nfunction getDiffMatchPatch(itemA, itemB, options, path) {\n  const { enabled, lengthThresholdRelative, lengthThresholdAbsolute } = options.diffMatchPatch, segment = path[path.length - 1];\n  if (!enabled || // Don't use for anything but strings\n  typeof itemA != \"string\" || typeof itemB != \"string\" || // Don't use for `_key`, `_ref` etc\n  typeof segment == \"string\" && segment[0] === \"_\" || // Don't use on short strings\n  itemB.length < lengthThresholdAbsolute)\n    return;\n  let strPatch = \"\";\n  try {\n    const patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.makeDiff)(itemA, itemB), diff = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.cleanupEfficiency)(patch);\n    strPatch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.stringifyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.makePatches)(diff));\n  } catch {\n    return;\n  }\n  return strPatch.length > itemB.length * lengthThresholdRelative ? void 0 : { op: \"diffMatchPatch\", path, value: strPatch };\n}\nfunction diffPrimitive(itemA, itemB, options, path, patches) {\n  const dmp = getDiffMatchPatch(itemA, itemB, options, path);\n  return patches.push(\n    dmp || {\n      op: \"set\",\n      path,\n      value: itemB\n    }\n  ), patches;\n}\nfunction isNotIgnoredKey(key) {\n  return ignoredKeys.indexOf(key) === -1;\n}\nfunction serializePatches(patches, options) {\n  if (patches.length === 0)\n    return [];\n  const { id, ifRevisionID } = options, set = patches.filter((patch) => patch.op === \"set\"), unset = patches.filter((patch) => patch.op === \"unset\"), insert = patches.filter((patch) => patch.op === \"insert\"), dmp = patches.filter((patch) => patch.op === \"diffMatchPatch\"), withSet = set.length > 0 && set.reduce(\n    (patch, item) => {\n      const path = pathToString(item.path);\n      return patch.set[path] = item.value, patch;\n    },\n    { id, set: {} }\n  ), withUnset = unset.length > 0 && unset.reduce(\n    (patch, item) => {\n      const path = pathToString(item.path);\n      return patch.unset.push(path), patch;\n    },\n    { id, unset: [] }\n  ), withInsert = insert.reduce((acc, item) => {\n    const after = pathToString(item.after);\n    return acc.concat({ id, insert: { after, items: item.items } });\n  }, []), withDmp = dmp.length > 0 && dmp.reduce(\n    (patch, item) => {\n      const path = pathToString(item.path);\n      return patch.diffMatchPatch[path] = item.value, patch;\n    },\n    { id, diffMatchPatch: {} }\n  );\n  return [withUnset, withSet, withDmp, ...withInsert].filter(\n    (item) => item !== !1\n  ).map((patch, i) => ({\n    patch: ifRevisionID && i === 0 ? { ...patch, ifRevisionID } : patch\n  }));\n}\nfunction isUniquelyKeyed(arr) {\n  const keys = [];\n  for (let i = 0; i < arr.length; i++) {\n    const key = getKey(arr[i]);\n    if (!key || keys.indexOf(key) !== -1)\n      return !1;\n    keys.push(key);\n  }\n  return !0;\n}\nfunction getKey(obj) {\n  return typeof obj == \"object\" && obj !== null && obj._key;\n}\nfunction indexByKey(arr) {\n  return arr.reduce(\n    (acc, item) => (acc.keys.push(item._key), acc.index[item._key] = item, acc),\n    { keys: [], index: {} }\n  );\n}\nfunction arrayIsEqual(itemA, itemB) {\n  return itemA.length === itemB.length && itemA.every((item, i) => itemB[i] === item);\n}\nfunction nullifyUndefined(item, path, index, options) {\n  if (typeof item < \"u\")\n    return item;\n  if (!options.hideWarnings) {\n    const serializedPath = pathToString(path.concat(index));\n    console.warn(`undefined value in array converted to null (at '${serializedPath}')`);\n  }\n  return null;\n}\nfunction isRevisionLocked(options) {\n  return !!options.ifRevisionID;\n}\nfunction yes(_) {\n  return !0;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2FuaXR5LWRpZmYtcGF0Y2gvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNHO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU8sR0FBRyxrQkFBa0I7QUFDNUM7QUFDQSxnQkFBZ0IsT0FBTyxVQUFVLGFBQWE7QUFDOUM7QUFDQSxnQkFBZ0IsT0FBTyxHQUFHLFFBQVE7QUFDbEM7QUFDQSxnQkFBZ0IsT0FBTyxJQUFJLFFBQVE7QUFDbkM7QUFDQSxnQkFBZ0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFFBQVE7QUFDdEQsaURBQWlELFFBQVE7QUFDekQsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTLE9BQU8sZUFBZTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLGFBQWEsS0FBSyxZQUFZO0FBQy9GO0FBQ0Esd0NBQXdDLDBEQUEwRDtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0JBQStCO0FBQ3pEO0FBQ0EsMEJBQTBCLG1CQUFtQjtBQUM3QztBQUNBLDJGQUEyRiwrQkFBK0I7QUFDMUg7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBLG1DQUFtQyxxQ0FBcUM7QUFDeEU7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EscUJBQXFCLGlDQUFpQyxpQkFBaUIsR0FBRztBQUMxRTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0JBQXdCO0FBQzFDO0FBQ0Esb0RBQW9ELFdBQVc7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDREQUE0RDtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrRUFBUSx1QkFBdUIsMkVBQWlCO0FBQ2xFLGVBQWUsMEVBQWdCLENBQUMscUVBQVc7QUFDM0MsSUFBSTtBQUNKO0FBQ0E7QUFDQSwrRUFBK0U7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsbUJBQW1CO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsTUFBTTtBQUNOO0FBQ0E7QUFDQSx3QkFBd0IsY0FBYyw0QkFBNEI7QUFDbEUsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMseUJBQXlCO0FBQ2hFLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLGVBQWU7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0U7QUFDRiIsInNvdXJjZXMiOlsiRDpcXFNPV05fR0lBSUNcXE5FWFQtV09SS1xcSEFDS0FUSE9OLTNcXFVJLVVYLUhBQ0tBVEhPTi1OZXh0SlMtRGVzaWduLUphbS0yMDI0LShNWS1DTE9ORS1QUk9KRUNUKVxcbm9kZV9tb2R1bGVzXFxzYW5pdHktZGlmZi1wYXRjaFxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFrZURpZmYsIGNsZWFudXBFZmZpY2llbmN5LCBzdHJpbmdpZnlQYXRjaGVzLCBtYWtlUGF0Y2hlcyB9IGZyb20gXCJAc2FuaXR5L2RpZmYtbWF0Y2gtcGF0Y2hcIjtcbmNvbnN0IElTX0RPVFRBQkxFX1JFID0gL15bQS1aYS16X11bQS1aYS16MC05X10qJC87XG5mdW5jdGlvbiBwYXRoVG9TdHJpbmcocGF0aCkge1xuICByZXR1cm4gcGF0aC5yZWR1Y2UoKHRhcmdldCwgc2VnbWVudCwgaSkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNlZ21lbnQpKVxuICAgICAgcmV0dXJuIGAke3RhcmdldH1bJHtzZWdtZW50LmpvaW4oXCI6XCIpfV1gO1xuICAgIGlmIChpc0tleWVkT2JqZWN0KHNlZ21lbnQpKVxuICAgICAgcmV0dXJuIGAke3RhcmdldH1bX2tleT09XCIke3NlZ21lbnQuX2tleX1cIl1gO1xuICAgIGlmICh0eXBlb2Ygc2VnbWVudCA9PSBcIm51bWJlclwiKVxuICAgICAgcmV0dXJuIGAke3RhcmdldH1bJHtzZWdtZW50fV1gO1xuICAgIGlmICh0eXBlb2Ygc2VnbWVudCA9PSBcInN0cmluZ1wiICYmICFJU19ET1RUQUJMRV9SRS50ZXN0KHNlZ21lbnQpKVxuICAgICAgcmV0dXJuIGAke3RhcmdldH1bJyR7c2VnbWVudH0nXWA7XG4gICAgaWYgKHR5cGVvZiBzZWdtZW50ID09IFwic3RyaW5nXCIpXG4gICAgICByZXR1cm4gYCR7dGFyZ2V0fSR7aSA9PT0gMCA/IFwiXCIgOiBcIi5cIn0ke3NlZ21lbnR9YDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHBhdGggc2VnbWVudCBcIiR7c2VnbWVudH1cImApO1xuICB9LCBcIlwiKTtcbn1cbmZ1bmN0aW9uIGlzS2V5ZWRPYmplY3Qob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iai5fa2V5ID09IFwic3RyaW5nXCI7XG59XG5jbGFzcyBEaWZmRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIHBhdGg7XG4gIHZhbHVlO1xuICBzZXJpYWxpemVkUGF0aDtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgcGF0aCwgdmFsdWUpIHtcbiAgICBjb25zdCBzZXJpYWxpemVkUGF0aCA9IHBhdGhUb1N0cmluZyhwYXRoKTtcbiAgICBzdXBlcihgJHttZXNzYWdlfSAoYXQgJyR7c2VyaWFsaXplZFBhdGh9JylgKSwgdGhpcy5wYXRoID0gcGF0aCwgdGhpcy5zZXJpYWxpemVkUGF0aCA9IHNlcmlhbGl6ZWRQYXRoLCB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbn1cbmNvbnN0IGlkUGF0dGVybiA9IC9eW2EtejAtOV1bYS16MC05Xy4tXSskL2ksIHByb3BQYXR0ZXJuID0gL15bYS16QS1aX11bYS16QS1aMC05Xy1dKiQvLCBwcm9wU3RhcnRQYXR0ZXJuID0gL15bYS16X10vaTtcbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydHkocHJvcGVydHksIHZhbHVlLCBwYXRoKSB7XG4gIGlmICghcHJvcFN0YXJ0UGF0dGVybi50ZXN0KHByb3BlcnR5KSlcbiAgICB0aHJvdyBuZXcgRGlmZkVycm9yKFwiS2V5cyBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIgKGEteilcIiwgcGF0aC5jb25jYXQocHJvcGVydHkpLCB2YWx1ZSk7XG4gIGlmICghcHJvcFBhdHRlcm4udGVzdChwcm9wZXJ0eSkpXG4gICAgdGhyb3cgbmV3IERpZmZFcnJvcihcbiAgICAgIFwiS2V5cyBjYW4gb25seSBjb250YWluIGxldHRlcnMsIG51bWJlcnMgYW5kIHVuZGVyc2NvcmVzXCIsXG4gICAgICBwYXRoLmNvbmNhdChwcm9wZXJ0eSksXG4gICAgICB2YWx1ZVxuICAgICk7XG4gIGlmIChwcm9wZXJ0eSA9PT0gXCJfa2V5XCIgfHwgcHJvcGVydHkgPT09IFwiX3JlZlwiIHx8IHByb3BlcnR5ID09PSBcIl90eXBlXCIpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9IFwic3RyaW5nXCIpXG4gICAgICB0aHJvdyBuZXcgRGlmZkVycm9yKFwiS2V5cyBtdXN0IGJlIHN0cmluZ3NcIiwgcGF0aC5jb25jYXQocHJvcGVydHkpLCB2YWx1ZSk7XG4gICAgaWYgKCFpZFBhdHRlcm4udGVzdCh2YWx1ZSkpXG4gICAgICB0aHJvdyBuZXcgRGlmZkVycm9yKFwiSW52YWxpZCBrZXkgLSB1c2UgbGVzcyBleG90aWMgY2hhcmFjdGVyc1wiLCBwYXRoLmNvbmNhdChwcm9wZXJ0eSksIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHk7XG59XG5jb25zdCBpZ25vcmVkS2V5cyA9IFtcIl9pZFwiLCBcIl90eXBlXCIsIFwiX2NyZWF0ZWRBdFwiLCBcIl91cGRhdGVkQXRcIiwgXCJfcmV2XCJdLCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgaGlkZVdhcm5pbmdzOiAhMSxcbiAgZGlmZk1hdGNoUGF0Y2g6IHtcbiAgICBlbmFibGVkOiAhMCxcbiAgICAvLyBPbmx5IHVzZSBkaWZmLW1hdGNoLXBhdGNoIGlmIHRhcmdldCBzdHJpbmcgaXMgbG9uZ2VyIHRoYW4gdGhpcyB0aHJlc2hvbGRcbiAgICBsZW5ndGhUaHJlc2hvbGRBYnNvbHV0ZTogMzAsXG4gICAgLy8gT25seSB1c2UgZ2VuZXJhdGVkIGRpZmYtbWF0Y2gtcGF0Y2ggaWYgdGhlIHBhdGNoIGxlbmd0aCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAvLyAodGFyZ2V0U3RyaW5nICogcmVsYXRpdmUpLiBFeGFtcGxlOiBBIDEwMCBjaGFyYWN0ZXIgdGFyZ2V0IHdpdGggYSByZWxhdGl2ZSBmYWN0b3JcbiAgICAvLyBvZiAxLjIgd2lsbCBhbGxvdyBhIDEyMCBjaGFyYWN0ZXIgZGlmZi1tYXRjaC1wYXRjaC4gSWYgbGFyZ2VyIHRoYW4gdGhpcyBudW1iZXIsXG4gICAgLy8gaXQgd2lsbCBmYWxsIGJhY2sgdG8gYSByZWd1bGFyIGBzZXRgIHBhdGNoLlxuICAgIGxlbmd0aFRocmVzaG9sZFJlbGF0aXZlOiAxLjJcbiAgfVxufTtcbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyhvcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgLi4uZGVmYXVsdE9wdGlvbnMsXG4gICAgLi4ub3B0aW9ucyxcbiAgICBkaWZmTWF0Y2hQYXRjaDogeyAuLi5kZWZhdWx0T3B0aW9ucy5kaWZmTWF0Y2hQYXRjaCwgLi4ub3B0aW9ucy5kaWZmTWF0Y2hQYXRjaCB8fCB7fSB9XG4gIH07XG59XG5mdW5jdGlvbiBkaWZmUGF0Y2goaXRlbUEsIGl0ZW1CLCBvcHRzKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMob3B0cyB8fCB7fSksIGlkID0gb3B0aW9ucy5pZCB8fCBpdGVtQS5faWQgPT09IGl0ZW1CLl9pZCAmJiBpdGVtQS5faWQsIHJldmlzaW9uTG9ja2VkID0gb3B0aW9ucy5pZlJldmlzaW9uSUQsIGlmUmV2aXNpb25JRCA9IHR5cGVvZiByZXZpc2lvbkxvY2tlZCA9PSBcImJvb2xlYW5cIiA/IGl0ZW1BLl9yZXYgOiByZXZpc2lvbkxvY2tlZCwgYmFzZVBhdGggPSBvcHRpb25zLmJhc2VQYXRoIHx8IFtdO1xuICBpZiAoIWlkKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiX2lkIG9uIGl0ZW1BIGFuZCBpdGVtQiBub3QgcHJlc2VudCBvciBkaWZmZXJzLCBzcGVjaWZ5IGRvY3VtZW50IGlkIHRoZSBtdXRhdGlvbnMgc2hvdWxkIGJlIGFwcGxpZWQgdG9cIlxuICAgICk7XG4gIGlmIChyZXZpc2lvbkxvY2tlZCA9PT0gITAgJiYgIWlmUmV2aXNpb25JRClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcImBpZlJldmlzaW9uSURgIGlzIHNldCB0byBgdHJ1ZWAsIGJ1dCBubyBgX3JldmAgd2FzIHBhc3NlZCBpbiBpdGVtIEEuIEVpdGhlciBleHBsaWNpdGx5IHNldCBgaWZSZXZpc2lvbklEYCB0byBhIHJldmlzaW9uLCBvciBwYXNzIGBfcmV2YCBhcyBwYXJ0IG9mIGl0ZW0gQS5cIlxuICAgICk7XG4gIGlmIChiYXNlUGF0aC5sZW5ndGggPT09IDAgJiYgaXRlbUEuX3R5cGUgIT09IGl0ZW1CLl90eXBlKVxuICAgIHRocm93IG5ldyBFcnJvcihgX3R5cGUgaXMgaW1tdXRhYmxlIGFuZCBjYW5ub3QgYmUgY2hhbmdlZCAoJHtpdGVtQS5fdHlwZX0gPT4gJHtpdGVtQi5fdHlwZX0pYCk7XG4gIGNvbnN0IG9wZXJhdGlvbnMgPSBkaWZmSXRlbShpdGVtQSwgaXRlbUIsIG9wdGlvbnMsIGJhc2VQYXRoLCBbXSk7XG4gIHJldHVybiBzZXJpYWxpemVQYXRjaGVzKG9wZXJhdGlvbnMsIHsgaWQsIGlmUmV2aXNpb25JRDogcmV2aXNpb25Mb2NrZWQgPyBpZlJldmlzaW9uSUQgOiB2b2lkIDAgfSk7XG59XG5mdW5jdGlvbiBkaWZmSXRlbShpdGVtQSwgaXRlbUIsIG9wdHMgPSBkZWZhdWx0T3B0aW9ucywgcGF0aCA9IFtdLCBwYXRjaGVzID0gW10pIHtcbiAgaWYgKGl0ZW1BID09PSBpdGVtQilcbiAgICByZXR1cm4gcGF0Y2hlcztcbiAgY29uc3QgYVR5cGUgPSBBcnJheS5pc0FycmF5KGl0ZW1BKSA/IFwiYXJyYXlcIiA6IHR5cGVvZiBpdGVtQSwgYlR5cGUgPSBBcnJheS5pc0FycmF5KGl0ZW1CKSA/IFwiYXJyYXlcIiA6IHR5cGVvZiBpdGVtQiwgYUlzVW5kZWZpbmVkID0gYVR5cGUgPT09IFwidW5kZWZpbmVkXCIsIGJJc1VuZGVmaW5lZCA9IGJUeXBlID09PSBcInVuZGVmaW5lZFwiO1xuICBpZiAoYUlzVW5kZWZpbmVkICYmICFiSXNVbmRlZmluZWQpXG4gICAgcmV0dXJuIHBhdGNoZXMucHVzaCh7IG9wOiBcInNldFwiLCBwYXRoLCB2YWx1ZTogaXRlbUIgfSksIHBhdGNoZXM7XG4gIGlmICghYUlzVW5kZWZpbmVkICYmIGJJc1VuZGVmaW5lZClcbiAgICByZXR1cm4gcGF0Y2hlcy5wdXNoKHsgb3A6IFwidW5zZXRcIiwgcGF0aCB9KSwgcGF0Y2hlcztcbiAgY29uc3Qgb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhvcHRzKSwgZGF0YVR5cGUgPSBhSXNVbmRlZmluZWQgPyBiVHlwZSA6IGFUeXBlO1xuICByZXR1cm4gZGF0YVR5cGUgPT09IFwib2JqZWN0XCIgfHwgZGF0YVR5cGUgPT09IFwiYXJyYXlcIiA/IGFUeXBlICE9PSBiVHlwZSA/IChwYXRjaGVzLnB1c2goeyBvcDogXCJzZXRcIiwgcGF0aCwgdmFsdWU6IGl0ZW1CIH0pLCBwYXRjaGVzKSA6IGRhdGFUeXBlID09PSBcImFycmF5XCIgPyBkaWZmQXJyYXkoaXRlbUEsIGl0ZW1CLCBvcHRpb25zLCBwYXRoLCBwYXRjaGVzKSA6IGRpZmZPYmplY3QoaXRlbUEsIGl0ZW1CLCBvcHRpb25zLCBwYXRoLCBwYXRjaGVzKSA6IGRpZmZQcmltaXRpdmUoaXRlbUEsIGl0ZW1CLCBvcHRpb25zLCBwYXRoLCBwYXRjaGVzKTtcbn1cbmZ1bmN0aW9uIGRpZmZPYmplY3QoaXRlbUEsIGl0ZW1CLCBvcHRpb25zLCBwYXRoLCBwYXRjaGVzKSB7XG4gIGNvbnN0IGF0Um9vdCA9IHBhdGgubGVuZ3RoID09PSAwLCBhS2V5cyA9IE9iamVjdC5rZXlzKGl0ZW1BKS5maWx0ZXIoYXRSb290ID8gaXNOb3RJZ25vcmVkS2V5IDogeWVzKS5tYXAoKGtleSkgPT4gdmFsaWRhdGVQcm9wZXJ0eShrZXksIGl0ZW1BW2tleV0sIHBhdGgpKSwgYUtleXNMZW5ndGggPSBhS2V5cy5sZW5ndGgsIGJLZXlzID0gT2JqZWN0LmtleXMoaXRlbUIpLmZpbHRlcihhdFJvb3QgPyBpc05vdElnbm9yZWRLZXkgOiB5ZXMpLm1hcCgoa2V5KSA9PiB2YWxpZGF0ZVByb3BlcnR5KGtleSwgaXRlbUJba2V5XSwgcGF0aCkpLCBiS2V5c0xlbmd0aCA9IGJLZXlzLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhS2V5c0xlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0gYUtleXNbaV07XG4gICAga2V5IGluIGl0ZW1CIHx8IHBhdGNoZXMucHVzaCh7IG9wOiBcInVuc2V0XCIsIHBhdGg6IHBhdGguY29uY2F0KGtleSkgfSk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBiS2V5c0xlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0gYktleXNbaV07XG4gICAgZGlmZkl0ZW0oaXRlbUFba2V5XSwgaXRlbUJba2V5XSwgb3B0aW9ucywgcGF0aC5jb25jYXQoW2tleV0pLCBwYXRjaGVzKTtcbiAgfVxuICByZXR1cm4gcGF0Y2hlcztcbn1cbmZ1bmN0aW9uIGRpZmZBcnJheShpdGVtQSwgaXRlbUIsIG9wdGlvbnMsIHBhdGgsIHBhdGNoZXMpIHtcbiAgaWYgKGl0ZW1CLmxlbmd0aCA+IGl0ZW1BLmxlbmd0aCAmJiBwYXRjaGVzLnB1c2goe1xuICAgIG9wOiBcImluc2VydFwiLFxuICAgIGFmdGVyOiBwYXRoLmNvbmNhdChbLTFdKSxcbiAgICBpdGVtczogaXRlbUIuc2xpY2UoaXRlbUEubGVuZ3RoKS5tYXAoKGl0ZW0sIGkpID0+IG51bGxpZnlVbmRlZmluZWQoaXRlbSwgcGF0aCwgaSwgb3B0aW9ucykpXG4gIH0pLCBpdGVtQi5sZW5ndGggPCBpdGVtQS5sZW5ndGgpIHtcbiAgICBjb25zdCBpc1NpbmdsZSA9IGl0ZW1BLmxlbmd0aCAtIGl0ZW1CLmxlbmd0aCA9PT0gMSwgdW5zZXRJdGVtcyA9IGl0ZW1BLnNsaWNlKGl0ZW1CLmxlbmd0aCk7XG4gICAgaXNSZXZpc2lvbkxvY2tlZChvcHRpb25zKSB8fCAhaXNVbmlxdWVseUtleWVkKHVuc2V0SXRlbXMpID8gcGF0Y2hlcy5wdXNoKHtcbiAgICAgIG9wOiBcInVuc2V0XCIsXG4gICAgICBwYXRoOiBwYXRoLmNvbmNhdChbaXNTaW5nbGUgPyBpdGVtQi5sZW5ndGggOiBbaXRlbUIubGVuZ3RoLCBcIlwiXV0pXG4gICAgfSkgOiBwYXRjaGVzLnB1c2goXG4gICAgICAuLi51bnNldEl0ZW1zLm1hcChcbiAgICAgICAgKGl0ZW0pID0+ICh7IG9wOiBcInVuc2V0XCIsIHBhdGg6IHBhdGguY29uY2F0KHsgX2tleTogaXRlbS5fa2V5IH0pIH0pXG4gICAgICApXG4gICAgKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1CLmxlbmd0aDsgaSsrKVxuICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW1CW2ldKSlcbiAgICAgIHRocm93IG5ldyBEaWZmRXJyb3IoXCJNdWx0aS1kaW1lbnNpb25hbCBhcnJheXMgbm90IHN1cHBvcnRlZFwiLCBwYXRoLmNvbmNhdChpKSwgaXRlbUJbaV0pO1xuICBjb25zdCBvdmVybGFwcGluZyA9IE1hdGgubWluKGl0ZW1BLmxlbmd0aCwgaXRlbUIubGVuZ3RoKSwgc2VnbWVudEEgPSBpdGVtQS5zbGljZSgwLCBvdmVybGFwcGluZyksIHNlZ21lbnRCID0gaXRlbUIuc2xpY2UoMCwgb3ZlcmxhcHBpbmcpO1xuICByZXR1cm4gaXNVbmlxdWVseUtleWVkKHNlZ21lbnRBKSAmJiBpc1VuaXF1ZWx5S2V5ZWQoc2VnbWVudEIpID8gZGlmZkFycmF5QnlLZXkoc2VnbWVudEEsIHNlZ21lbnRCLCBvcHRpb25zLCBwYXRoLCBwYXRjaGVzKSA6IGRpZmZBcnJheUJ5SW5kZXgoc2VnbWVudEEsIHNlZ21lbnRCLCBvcHRpb25zLCBwYXRoLCBwYXRjaGVzKTtcbn1cbmZ1bmN0aW9uIGRpZmZBcnJheUJ5SW5kZXgoaXRlbUEsIGl0ZW1CLCBvcHRpb25zLCBwYXRoLCBwYXRjaGVzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbUEubGVuZ3RoOyBpKyspXG4gICAgZGlmZkl0ZW0oXG4gICAgICBpdGVtQVtpXSxcbiAgICAgIG51bGxpZnlVbmRlZmluZWQoaXRlbUJbaV0sIHBhdGgsIGksIG9wdGlvbnMpLFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHBhdGguY29uY2F0KGkpLFxuICAgICAgcGF0Y2hlc1xuICAgICk7XG4gIHJldHVybiBwYXRjaGVzO1xufVxuZnVuY3Rpb24gZGlmZkFycmF5QnlLZXkoaXRlbUEsIGl0ZW1CLCBvcHRpb25zLCBwYXRoLCBwYXRjaGVzKSB7XG4gIGNvbnN0IGtleWVkQSA9IGluZGV4QnlLZXkoaXRlbUEpLCBrZXllZEIgPSBpbmRleEJ5S2V5KGl0ZW1CKTtcbiAgaWYgKCFhcnJheUlzRXF1YWwoa2V5ZWRBLmtleXMsIGtleWVkQi5rZXlzKSlcbiAgICByZXR1cm4gZGlmZkFycmF5QnlJbmRleChpdGVtQSwgaXRlbUIsIG9wdGlvbnMsIHBhdGgsIHBhdGNoZXMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleWVkQi5rZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0ga2V5ZWRCLmtleXNbaV0sIHZhbHVlQSA9IGtleWVkQS5pbmRleFtrZXldLCB2YWx1ZUIgPSBudWxsaWZ5VW5kZWZpbmVkKGtleWVkQi5pbmRleFtrZXldLCBwYXRoLCBpLCBvcHRpb25zKTtcbiAgICBkaWZmSXRlbSh2YWx1ZUEsIHZhbHVlQiwgb3B0aW9ucywgcGF0aC5jb25jYXQoeyBfa2V5OiBrZXkgfSksIHBhdGNoZXMpO1xuICB9XG4gIHJldHVybiBwYXRjaGVzO1xufVxuZnVuY3Rpb24gZ2V0RGlmZk1hdGNoUGF0Y2goaXRlbUEsIGl0ZW1CLCBvcHRpb25zLCBwYXRoKSB7XG4gIGNvbnN0IHsgZW5hYmxlZCwgbGVuZ3RoVGhyZXNob2xkUmVsYXRpdmUsIGxlbmd0aFRocmVzaG9sZEFic29sdXRlIH0gPSBvcHRpb25zLmRpZmZNYXRjaFBhdGNoLCBzZWdtZW50ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICBpZiAoIWVuYWJsZWQgfHwgLy8gRG9uJ3QgdXNlIGZvciBhbnl0aGluZyBidXQgc3RyaW5nc1xuICB0eXBlb2YgaXRlbUEgIT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgaXRlbUIgIT0gXCJzdHJpbmdcIiB8fCAvLyBEb24ndCB1c2UgZm9yIGBfa2V5YCwgYF9yZWZgIGV0Y1xuICB0eXBlb2Ygc2VnbWVudCA9PSBcInN0cmluZ1wiICYmIHNlZ21lbnRbMF0gPT09IFwiX1wiIHx8IC8vIERvbid0IHVzZSBvbiBzaG9ydCBzdHJpbmdzXG4gIGl0ZW1CLmxlbmd0aCA8IGxlbmd0aFRocmVzaG9sZEFic29sdXRlKVxuICAgIHJldHVybjtcbiAgbGV0IHN0clBhdGNoID0gXCJcIjtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXRjaCA9IG1ha2VEaWZmKGl0ZW1BLCBpdGVtQiksIGRpZmYgPSBjbGVhbnVwRWZmaWNpZW5jeShwYXRjaCk7XG4gICAgc3RyUGF0Y2ggPSBzdHJpbmdpZnlQYXRjaGVzKG1ha2VQYXRjaGVzKGRpZmYpKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBzdHJQYXRjaC5sZW5ndGggPiBpdGVtQi5sZW5ndGggKiBsZW5ndGhUaHJlc2hvbGRSZWxhdGl2ZSA/IHZvaWQgMCA6IHsgb3A6IFwiZGlmZk1hdGNoUGF0Y2hcIiwgcGF0aCwgdmFsdWU6IHN0clBhdGNoIH07XG59XG5mdW5jdGlvbiBkaWZmUHJpbWl0aXZlKGl0ZW1BLCBpdGVtQiwgb3B0aW9ucywgcGF0aCwgcGF0Y2hlcykge1xuICBjb25zdCBkbXAgPSBnZXREaWZmTWF0Y2hQYXRjaChpdGVtQSwgaXRlbUIsIG9wdGlvbnMsIHBhdGgpO1xuICByZXR1cm4gcGF0Y2hlcy5wdXNoKFxuICAgIGRtcCB8fCB7XG4gICAgICBvcDogXCJzZXRcIixcbiAgICAgIHBhdGgsXG4gICAgICB2YWx1ZTogaXRlbUJcbiAgICB9XG4gICksIHBhdGNoZXM7XG59XG5mdW5jdGlvbiBpc05vdElnbm9yZWRLZXkoa2V5KSB7XG4gIHJldHVybiBpZ25vcmVkS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xufVxuZnVuY3Rpb24gc2VyaWFsaXplUGF0Y2hlcyhwYXRjaGVzLCBvcHRpb25zKSB7XG4gIGlmIChwYXRjaGVzLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gW107XG4gIGNvbnN0IHsgaWQsIGlmUmV2aXNpb25JRCB9ID0gb3B0aW9ucywgc2V0ID0gcGF0Y2hlcy5maWx0ZXIoKHBhdGNoKSA9PiBwYXRjaC5vcCA9PT0gXCJzZXRcIiksIHVuc2V0ID0gcGF0Y2hlcy5maWx0ZXIoKHBhdGNoKSA9PiBwYXRjaC5vcCA9PT0gXCJ1bnNldFwiKSwgaW5zZXJ0ID0gcGF0Y2hlcy5maWx0ZXIoKHBhdGNoKSA9PiBwYXRjaC5vcCA9PT0gXCJpbnNlcnRcIiksIGRtcCA9IHBhdGNoZXMuZmlsdGVyKChwYXRjaCkgPT4gcGF0Y2gub3AgPT09IFwiZGlmZk1hdGNoUGF0Y2hcIiksIHdpdGhTZXQgPSBzZXQubGVuZ3RoID4gMCAmJiBzZXQucmVkdWNlKFxuICAgIChwYXRjaCwgaXRlbSkgPT4ge1xuICAgICAgY29uc3QgcGF0aCA9IHBhdGhUb1N0cmluZyhpdGVtLnBhdGgpO1xuICAgICAgcmV0dXJuIHBhdGNoLnNldFtwYXRoXSA9IGl0ZW0udmFsdWUsIHBhdGNoO1xuICAgIH0sXG4gICAgeyBpZCwgc2V0OiB7fSB9XG4gICksIHdpdGhVbnNldCA9IHVuc2V0Lmxlbmd0aCA+IDAgJiYgdW5zZXQucmVkdWNlKFxuICAgIChwYXRjaCwgaXRlbSkgPT4ge1xuICAgICAgY29uc3QgcGF0aCA9IHBhdGhUb1N0cmluZyhpdGVtLnBhdGgpO1xuICAgICAgcmV0dXJuIHBhdGNoLnVuc2V0LnB1c2gocGF0aCksIHBhdGNoO1xuICAgIH0sXG4gICAgeyBpZCwgdW5zZXQ6IFtdIH1cbiAgKSwgd2l0aEluc2VydCA9IGluc2VydC5yZWR1Y2UoKGFjYywgaXRlbSkgPT4ge1xuICAgIGNvbnN0IGFmdGVyID0gcGF0aFRvU3RyaW5nKGl0ZW0uYWZ0ZXIpO1xuICAgIHJldHVybiBhY2MuY29uY2F0KHsgaWQsIGluc2VydDogeyBhZnRlciwgaXRlbXM6IGl0ZW0uaXRlbXMgfSB9KTtcbiAgfSwgW10pLCB3aXRoRG1wID0gZG1wLmxlbmd0aCA+IDAgJiYgZG1wLnJlZHVjZShcbiAgICAocGF0Y2gsIGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHBhdGggPSBwYXRoVG9TdHJpbmcoaXRlbS5wYXRoKTtcbiAgICAgIHJldHVybiBwYXRjaC5kaWZmTWF0Y2hQYXRjaFtwYXRoXSA9IGl0ZW0udmFsdWUsIHBhdGNoO1xuICAgIH0sXG4gICAgeyBpZCwgZGlmZk1hdGNoUGF0Y2g6IHt9IH1cbiAgKTtcbiAgcmV0dXJuIFt3aXRoVW5zZXQsIHdpdGhTZXQsIHdpdGhEbXAsIC4uLndpdGhJbnNlcnRdLmZpbHRlcihcbiAgICAoaXRlbSkgPT4gaXRlbSAhPT0gITFcbiAgKS5tYXAoKHBhdGNoLCBpKSA9PiAoe1xuICAgIHBhdGNoOiBpZlJldmlzaW9uSUQgJiYgaSA9PT0gMCA/IHsgLi4ucGF0Y2gsIGlmUmV2aXNpb25JRCB9IDogcGF0Y2hcbiAgfSkpO1xufVxuZnVuY3Rpb24gaXNVbmlxdWVseUtleWVkKGFycikge1xuICBjb25zdCBrZXlzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0gZ2V0S2V5KGFycltpXSk7XG4gICAgaWYgKCFrZXkgfHwga2V5cy5pbmRleE9mKGtleSkgIT09IC0xKVxuICAgICAgcmV0dXJuICExO1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGdldEtleShvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT0gXCJvYmplY3RcIiAmJiBvYmogIT09IG51bGwgJiYgb2JqLl9rZXk7XG59XG5mdW5jdGlvbiBpbmRleEJ5S2V5KGFycikge1xuICByZXR1cm4gYXJyLnJlZHVjZShcbiAgICAoYWNjLCBpdGVtKSA9PiAoYWNjLmtleXMucHVzaChpdGVtLl9rZXkpLCBhY2MuaW5kZXhbaXRlbS5fa2V5XSA9IGl0ZW0sIGFjYyksXG4gICAgeyBrZXlzOiBbXSwgaW5kZXg6IHt9IH1cbiAgKTtcbn1cbmZ1bmN0aW9uIGFycmF5SXNFcXVhbChpdGVtQSwgaXRlbUIpIHtcbiAgcmV0dXJuIGl0ZW1BLmxlbmd0aCA9PT0gaXRlbUIubGVuZ3RoICYmIGl0ZW1BLmV2ZXJ5KChpdGVtLCBpKSA9PiBpdGVtQltpXSA9PT0gaXRlbSk7XG59XG5mdW5jdGlvbiBudWxsaWZ5VW5kZWZpbmVkKGl0ZW0sIHBhdGgsIGluZGV4LCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgaXRlbSA8IFwidVwiKVxuICAgIHJldHVybiBpdGVtO1xuICBpZiAoIW9wdGlvbnMuaGlkZVdhcm5pbmdzKSB7XG4gICAgY29uc3Qgc2VyaWFsaXplZFBhdGggPSBwYXRoVG9TdHJpbmcocGF0aC5jb25jYXQoaW5kZXgpKTtcbiAgICBjb25zb2xlLndhcm4oYHVuZGVmaW5lZCB2YWx1ZSBpbiBhcnJheSBjb252ZXJ0ZWQgdG8gbnVsbCAoYXQgJyR7c2VyaWFsaXplZFBhdGh9JylgKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzUmV2aXNpb25Mb2NrZWQob3B0aW9ucykge1xuICByZXR1cm4gISFvcHRpb25zLmlmUmV2aXNpb25JRDtcbn1cbmZ1bmN0aW9uIHllcyhfKSB7XG4gIHJldHVybiAhMDtcbn1cbmV4cG9ydCB7XG4gIERpZmZFcnJvcixcbiAgZGlmZkl0ZW0sXG4gIGRpZmZQYXRjaFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sanity-diff-patch/dist/index.js\n");

/***/ })

};
;